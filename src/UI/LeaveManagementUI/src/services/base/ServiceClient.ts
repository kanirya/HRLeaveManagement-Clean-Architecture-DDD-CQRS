//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export interface IClient {
    /**
     * @param body (optional) 
     * @return OK
     */
    login(body: LoginUserDto | undefined,  cancelToken?: CancelToken): Promise<void>;
    /**
     * @param body (optional) 
     * @return OK
     */
    register(body: RegisterUserDto | undefined,  cancelToken?: CancelToken): Promise<void>;
    /**
     * @return OK
     */
    getAll( cancelToken?: CancelToken): Promise<LeaveAllocationDto[]>;
    /**
     * @return OK
     */
    get(id: number,  cancelToken?: CancelToken): Promise<void>;
    /**
     * @param body (optional) 
     * @return OK
     */
    post(body: CreateLeaveAllocationDto | undefined,  cancelToken?: CancelToken): Promise<void>;
    /**
     * @param body (optional) 
     * @return OK
     */
    put(body: UpdateLeaveAllocationDto | undefined,  cancelToken?: CancelToken): Promise<void>;
    /**
     * @return OK
     */
    delete(id: number,  cancelToken?: CancelToken): Promise<void>;
    /**
     * @return OK
     */
    getAll2( cancelToken?: CancelToken): Promise<LeaveRequestDto[]>;
    /**
     * @return OK
     */
    get2(id: number,  cancelToken?: CancelToken): Promise<void>;
    /**
     * @param body (optional) 
     * @return OK
     */
    post2(body: CreateLeaveRequestDto | undefined,  cancelToken?: CancelToken): Promise<void>;
    /**
     * @param body (optional) 
     * @return OK
     */
    put2(id: number, body: UpdateLeaveRequestDto | undefined,  cancelToken?: CancelToken): Promise<void>;
    /**
     * @param body (optional) 
     * @return OK
     */
    changeApproval(body: ChangeLeaveRequestApprovalDto | undefined,  cancelToken?: CancelToken): Promise<void>;
    /**
     * @return OK
     */
    delete2(id: number,  cancelToken?: CancelToken): Promise<void>;
    /**
     * @return OK
     */
    getAll3( cancelToken?: CancelToken): Promise<LeaveTypeDto[]>;
    /**
     * @return OK
     */
    get3(id: number,  cancelToken?: CancelToken): Promise<LeaveTypeDto>;
    /**
     * @param body (optional) 
     * @return OK
     */
    post3(body: CreateLeaveTypeDto | undefined,  cancelToken?: CancelToken): Promise<void>;
    /**
     * @param body (optional) 
     * @return OK
     */
    put3(body: LeaveTypeDto | undefined,  cancelToken?: CancelToken): Promise<void>;
    /**
     * @return OK
     */
    delete3(id: number,  cancelToken?: CancelToken): Promise<void>;
}

export class Client implements IClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * @param body (optional) 
     * @return OK
     */
    login(body: LoginUserDto | undefined, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/Auth/Login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    register(body: RegisterUserDto | undefined, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/Auth/Register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRegister(_response);
        });
    }

    protected processRegister(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    getAll( cancelToken?: CancelToken): Promise<LeaveAllocationDto[]> {
        let url_ = this.baseUrl + "/api/LeaveAllocation/Get";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAll(_response);
        });
    }

    protected processGetAll(response: AxiosResponse): Promise<LeaveAllocationDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(LeaveAllocationDto.fromJS(item));
            }
            else {
                result200 = null as any;
            }
            return Promise.resolve<LeaveAllocationDto[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<LeaveAllocationDto[]>(null as any);
    }

    /**
     * @return OK
     */
    get(id: number, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/LeaveAllocation/Get/{id}";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    post(body: CreateLeaveAllocationDto | undefined, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/LeaveAllocation/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPost(_response);
        });
    }

    protected processPost(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    put(body: UpdateLeaveAllocationDto | undefined, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/LeaveAllocation/Put";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPut(_response);
        });
    }

    protected processPut(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    delete(id: number, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/LeaveAllocation/Delete/{id}";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    getAll2( cancelToken?: CancelToken): Promise<LeaveRequestDto[]> {
        let url_ = this.baseUrl + "/api/LeaveRequest/Get";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAll2(_response);
        });
    }

    protected processGetAll2(response: AxiosResponse): Promise<LeaveRequestDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(LeaveRequestDto.fromJS(item));
            }
            else {
                result200 = null as any;
            }
            return Promise.resolve<LeaveRequestDto[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<LeaveRequestDto[]>(null as any);
    }

    /**
     * @return OK
     */
    get2(id: number, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/LeaveRequest/Get/{id}";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGet2(_response);
        });
    }

    protected processGet2(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    post2(body: CreateLeaveRequestDto | undefined, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/LeaveRequest/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPost2(_response);
        });
    }

    protected processPost2(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    put2(id: number, body: UpdateLeaveRequestDto | undefined, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/LeaveRequest/Put/{id}";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPut2(_response);
        });
    }

    protected processPut2(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    changeApproval(body: ChangeLeaveRequestApprovalDto | undefined, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/LeaveRequest/ChangeApproval";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processChangeApproval(_response);
        });
    }

    protected processChangeApproval(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    delete2(id: number, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/LeaveRequest/Delete/{id}";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDelete2(_response);
        });
    }

    protected processDelete2(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    getAll3( cancelToken?: CancelToken): Promise<LeaveTypeDto[]> {
        let url_ = this.baseUrl + "/api/LeaveTypes/Get";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAll3(_response);
        });
    }

    protected processGetAll3(response: AxiosResponse): Promise<LeaveTypeDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(LeaveTypeDto.fromJS(item));
            }
            else {
                result200 = null as any;
            }
            return Promise.resolve<LeaveTypeDto[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<LeaveTypeDto[]>(null as any);
    }

    /**
     * @return OK
     */
    get3(id: number, cancelToken?: CancelToken): Promise<LeaveTypeDto> {
        let url_ = this.baseUrl + "/api/LeaveTypes/Get/{id}";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGet3(_response);
        });
    }

    protected processGet3(response: AxiosResponse): Promise<LeaveTypeDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = LeaveTypeDto.fromJS(resultData200);
            return Promise.resolve<LeaveTypeDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<LeaveTypeDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    post3(body: CreateLeaveTypeDto | undefined, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/LeaveTypes/Post";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPost3(_response);
        });
    }

    protected processPost3(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    put3(body: LeaveTypeDto | undefined, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/LeaveTypes/Put";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPut3(_response);
        });
    }

    protected processPut3(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    delete3(id: number, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/LeaveTypes/Delete/{id}";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDelete3(_response);
        });
    }

    protected processDelete3(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }
}

export class ChangeLeaveRequestApprovalDto implements IChangeLeaveRequestApprovalDto {
    id?: number;
    approved?: boolean | undefined;

    constructor(data?: IChangeLeaveRequestApprovalDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.approved = _data["approved"];
        }
    }

    static fromJS(data: any): ChangeLeaveRequestApprovalDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChangeLeaveRequestApprovalDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["approved"] = this.approved;
        return data;
    }
}

export interface IChangeLeaveRequestApprovalDto {
    id?: number;
    approved?: boolean | undefined;
}

export class CreateLeaveAllocationDto implements ICreateLeaveAllocationDto {
    numberOfDays?: number;
    leaveTypeId?: number;
    period?: number;

    constructor(data?: ICreateLeaveAllocationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.numberOfDays = _data["numberOfDays"];
            this.leaveTypeId = _data["leaveTypeId"];
            this.period = _data["period"];
        }
    }

    static fromJS(data: any): CreateLeaveAllocationDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateLeaveAllocationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["numberOfDays"] = this.numberOfDays;
        data["leaveTypeId"] = this.leaveTypeId;
        data["period"] = this.period;
        return data;
    }
}

export interface ICreateLeaveAllocationDto {
    numberOfDays?: number;
    leaveTypeId?: number;
    period?: number;
}

export class CreateLeaveRequestDto implements ICreateLeaveRequestDto {
    startDate?: Date;
    endDate?: Date;
    leaveTypeId?: number;
    requestComments?: string | undefined;

    constructor(data?: ICreateLeaveRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : undefined as any;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : undefined as any;
            this.leaveTypeId = _data["leaveTypeId"];
            this.requestComments = _data["requestComments"];
        }
    }

    static fromJS(data: any): CreateLeaveRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateLeaveRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["startDate"] = this.startDate ? this.startDate.toISOString() : undefined as any;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : undefined as any;
        data["leaveTypeId"] = this.leaveTypeId;
        data["requestComments"] = this.requestComments;
        return data;
    }
}

export interface ICreateLeaveRequestDto {
    startDate?: Date;
    endDate?: Date;
    leaveTypeId?: number;
    requestComments?: string | undefined;
}

export class CreateLeaveTypeDto implements ICreateLeaveTypeDto {
    name?: string | undefined;
    defaultDays?: number;

    constructor(data?: ICreateLeaveTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.defaultDays = _data["defaultDays"];
        }
    }

    static fromJS(data: any): CreateLeaveTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateLeaveTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["defaultDays"] = this.defaultDays;
        return data;
    }
}

export interface ICreateLeaveTypeDto {
    name?: string | undefined;
    defaultDays?: number;
}

export class LeaveAllocationDto implements ILeaveAllocationDto {
    id?: number;
    numberOfDays?: number;
    leaveType?: LeaveTypeDto;
    leaveTypeId?: number;
    period?: number;
    employeeId?: string | undefined;

    constructor(data?: ILeaveAllocationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.numberOfDays = _data["numberOfDays"];
            this.leaveType = _data["leaveType"] ? LeaveTypeDto.fromJS(_data["leaveType"]) : undefined as any;
            this.leaveTypeId = _data["leaveTypeId"];
            this.period = _data["period"];
            this.employeeId = _data["employeeId"];
        }
    }

    static fromJS(data: any): LeaveAllocationDto {
        data = typeof data === 'object' ? data : {};
        let result = new LeaveAllocationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["numberOfDays"] = this.numberOfDays;
        data["leaveType"] = this.leaveType ? this.leaveType.toJSON() : undefined as any;
        data["leaveTypeId"] = this.leaveTypeId;
        data["period"] = this.period;
        data["employeeId"] = this.employeeId;
        return data;
    }
}

export interface ILeaveAllocationDto {
    id?: number;
    numberOfDays?: number;
    leaveType?: LeaveTypeDto;
    leaveTypeId?: number;
    period?: number;
    employeeId?: string | undefined;
}

export class LeaveRequestDto implements ILeaveRequestDto {
    id?: number;
    startDate?: Date;
    endDate?: Date;
    leaveType?: LeaveTypeDto;
    leaveTypeId?: number;
    dateRequested?: Date;
    requestComments?: string | undefined;
    dateActioned?: Date | undefined;
    approved?: boolean | undefined;
    cancelled?: boolean;
    requestingEmployeeId?: string | undefined;

    constructor(data?: ILeaveRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : undefined as any;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : undefined as any;
            this.leaveType = _data["leaveType"] ? LeaveTypeDto.fromJS(_data["leaveType"]) : undefined as any;
            this.leaveTypeId = _data["leaveTypeId"];
            this.dateRequested = _data["dateRequested"] ? new Date(_data["dateRequested"].toString()) : undefined as any;
            this.requestComments = _data["requestComments"];
            this.dateActioned = _data["dateActioned"] ? new Date(_data["dateActioned"].toString()) : undefined as any;
            this.approved = _data["approved"];
            this.cancelled = _data["cancelled"];
            this.requestingEmployeeId = _data["requestingEmployeeId"];
        }
    }

    static fromJS(data: any): LeaveRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new LeaveRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : undefined as any;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : undefined as any;
        data["leaveType"] = this.leaveType ? this.leaveType.toJSON() : undefined as any;
        data["leaveTypeId"] = this.leaveTypeId;
        data["dateRequested"] = this.dateRequested ? this.dateRequested.toISOString() : undefined as any;
        data["requestComments"] = this.requestComments;
        data["dateActioned"] = this.dateActioned ? this.dateActioned.toISOString() : undefined as any;
        data["approved"] = this.approved;
        data["cancelled"] = this.cancelled;
        data["requestingEmployeeId"] = this.requestingEmployeeId;
        return data;
    }
}

export interface ILeaveRequestDto {
    id?: number;
    startDate?: Date;
    endDate?: Date;
    leaveType?: LeaveTypeDto;
    leaveTypeId?: number;
    dateRequested?: Date;
    requestComments?: string | undefined;
    dateActioned?: Date | undefined;
    approved?: boolean | undefined;
    cancelled?: boolean;
    requestingEmployeeId?: string | undefined;
}

export class LeaveTypeDto implements ILeaveTypeDto {
    id?: number;
    name?: string | undefined;
    defaultDays?: number;

    constructor(data?: ILeaveTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.defaultDays = _data["defaultDays"];
        }
    }

    static fromJS(data: any): LeaveTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new LeaveTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["defaultDays"] = this.defaultDays;
        return data;
    }
}

export interface ILeaveTypeDto {
    id?: number;
    name?: string | undefined;
    defaultDays?: number;
}

export class LoginUserDto implements ILoginUserDto {
    email?: string | undefined;
    password?: string | undefined;

    constructor(data?: ILoginUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new LoginUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface ILoginUserDto {
    email?: string | undefined;
    password?: string | undefined;
}

export class RegisterUserDto implements IRegisterUserDto {
    name?: string | undefined;
    email?: string | undefined;
    password?: string | undefined;
    role?: string | undefined;

    constructor(data?: IRegisterUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.email = _data["email"];
            this.password = _data["password"];
            this.role = _data["role"];
        }
    }

    static fromJS(data: any): RegisterUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["email"] = this.email;
        data["password"] = this.password;
        data["role"] = this.role;
        return data;
    }
}

export interface IRegisterUserDto {
    name?: string | undefined;
    email?: string | undefined;
    password?: string | undefined;
    role?: string | undefined;
}

export class UpdateLeaveAllocationDto implements IUpdateLeaveAllocationDto {
    id?: number;
    numberOfDays?: number;
    leaveTypeId?: number;
    period?: number;

    constructor(data?: IUpdateLeaveAllocationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.numberOfDays = _data["numberOfDays"];
            this.leaveTypeId = _data["leaveTypeId"];
            this.period = _data["period"];
        }
    }

    static fromJS(data: any): UpdateLeaveAllocationDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateLeaveAllocationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["numberOfDays"] = this.numberOfDays;
        data["leaveTypeId"] = this.leaveTypeId;
        data["period"] = this.period;
        return data;
    }
}

export interface IUpdateLeaveAllocationDto {
    id?: number;
    numberOfDays?: number;
    leaveTypeId?: number;
    period?: number;
}

export class UpdateLeaveRequestDto implements IUpdateLeaveRequestDto {
    id?: number;
    startDate?: Date;
    endDate?: Date;
    leaveTypeId?: number;
    requestComments?: string | undefined;
    cancelled?: boolean;

    constructor(data?: IUpdateLeaveRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : undefined as any;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : undefined as any;
            this.leaveTypeId = _data["leaveTypeId"];
            this.requestComments = _data["requestComments"];
            this.cancelled = _data["cancelled"];
        }
    }

    static fromJS(data: any): UpdateLeaveRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateLeaveRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : undefined as any;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : undefined as any;
        data["leaveTypeId"] = this.leaveTypeId;
        data["requestComments"] = this.requestComments;
        data["cancelled"] = this.cancelled;
        return data;
    }
}

export interface IUpdateLeaveRequestDto {
    id?: number;
    startDate?: Date;
    endDate?: Date;
    leaveTypeId?: number;
    requestComments?: string | undefined;
    cancelled?: boolean;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    throw new ApiException(message, status, response, headers, result);
}

function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}